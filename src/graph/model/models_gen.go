// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type ContactUsEmail struct {
	Email   string `json:"email"`
	Name    string `json:"name"`
	Subject string `json:"subject"`
	Detail  string `json:"detail"`
	To      To     `json:"to"`
}

type Response struct {
	Status string `json:"status"`
}

type To string

const (
	ToMahendra    To = "MAHENDRA"
	ToHegdeflutes To = "HEGDEFLUTES"
)

var AllTo = []To{
	ToMahendra,
	ToHegdeflutes,
}

func (e To) IsValid() bool {
	switch e {
	case ToMahendra, ToHegdeflutes:
		return true
	}
	return false
}

func (e To) String() string {
	return string(e)
}

func (e *To) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = To(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid To", str)
	}
	return nil
}

func (e To) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
